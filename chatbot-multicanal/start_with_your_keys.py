"""
Ejecutar Chatbot Multicanal con tus credenciales reales
OpenAI + Telegram Bot funcionando
WhatsApp opcional (sin Twilio por ahora)
"""

import os
import subprocess
import time
from multiprocessing import Process
import signal
import sys

def run_web_chat():
    """Ejecutar chat web con OpenAI"""
    print("üåê Iniciando Chat Web con OpenAI...")
    try:
        os.system("python channels/web.py")
    except Exception as e:
        print(f"‚ùå Error en chat web: {e}")

def run_telegram_bot():
    """Ejecutar bot de Telegram"""
    print("üì≤ Iniciando Bot de Telegram...")
    try:
        os.system("python channels/telegram.py")
    except Exception as e:
        print(f"‚ùå Error en Telegram: {e}")

def run_dashboard():
    """Ejecutar dashboard de monitoreo"""
    print("üìä Iniciando Dashboard de Monitoreo...")
    try:
        os.system("python monitoring/dashboard.py")
    except Exception as e:
        print(f"‚ùå Error en dashboard: {e}")

def signal_handler(sig, frame):
    """Manejar se√±al de interrupci√≥n"""
    print("\nüõë Deteniendo todos los servicios...")
    sys.exit(0)

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando Chatbot Multicanal con TUS CREDENCIALES...")
    print("="*60)
    
    # Configurar manejador de se√±ales
    signal.signal(signal.SIGINT, signal_handler)
    
    # Cargar variables de entorno
    from dotenv import load_dotenv
    load_dotenv()
    
    # Verificar credenciales
    openai_key = os.getenv('OPENAI_API_KEY')
    telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not openai_key or openai_key.startswith('sk-your-'):
        print("‚ùå OpenAI API Key no configurada correctamente")
        print(f"   Valor actual: {openai_key[:20] + '...' if openai_key else 'None'}")
        return
    
    if not telegram_token or telegram_token.startswith('your-'):
        print("‚ùå Telegram Bot Token no configurado correctamente")
        print(f"   Valor actual: {telegram_token[:20] + '...' if telegram_token else 'None'}")
        return
    
    print("‚úÖ OpenAI API Key: Configurada")
    print("‚úÖ Telegram Bot Token: Configurado")
    print("‚ö†Ô∏è  WhatsApp: Sin Twilio (opcional)")
    print("="*60)
    
    # Crear directorios necesarios
    os.makedirs("knowledge", exist_ok=True)
    os.makedirs("knowledge_db", exist_ok=True)
    os.makedirs("monitoring", exist_ok=True)
    
    # Crear archivos de conocimiento
    create_sample_knowledge_files()
    
    # Iniciar servicios
    processes = []
    
    try:
        print("\nüöÄ Iniciando servicios...")
        
        # Proceso Web Chat
        web_process = Process(target=run_web_chat)
        web_process.start()
        processes.append(web_process)
        time.sleep(3)
        
        # Proceso Telegram
        telegram_process = Process(target=run_telegram_bot)
        telegram_process.start()
        processes.append(telegram_process)
        time.sleep(3)
        
        # Proceso Dashboard
        dashboard_process = Process(target=run_dashboard)
        dashboard_process.start()
        processes.append(dashboard_process)
        time.sleep(3)
        
        print("\n‚úÖ SERVICIOS INICIADOS CORRECTAMENTE")
        print("="*60)
        print("üåê CHAT WEB: http://localhost:8000")
        print("üì≤ TELEGRAM: Bot activo (busca tu bot en Telegram)")
        print("üìä DASHBOARD: http://localhost:8001")
        print("="*60)
        print("\nüìã INSTRUCCIONES:")
        print("1. Abre http://localhost:8000 en tu navegador")
        print("2. Prueba el chat web con OpenAI")
        print("3. Ve a http://localhost:8001 para ver el dashboard")
        print("4. Busca tu bot en Telegram y env√≠ale /start")
        print("\nPresiona Ctrl+C para detener todos los servicios")
        
        # Esperar a que terminen los procesos
        for process in processes:
            process.join()
            
    except KeyboardInterrupt:
        print("\nüõë Deteniendo servicios...")
        for process in processes:
            process.terminate()
        print("‚úÖ Servicios detenidos")

def create_sample_knowledge_files():
    """Crear archivos de conocimiento de ejemplo"""
    
    # Informaci√≥n de la empresa
    empresa_info = """
    INFORMACI√ìN DE LA EMPRESA
    
    Nombre: Mente Aut√≥noma
    Descripci√≥n: Especialistas en desarrollo de software e inteligencia artificial
    Ubicaci√≥n: Antofagasta, Chile
    A√±o de fundaci√≥n: 2024
    
    MISI√ìN:
    Democratizar el acceso a la tecnolog√≠a de inteligencia artificial para peque√±as y medianas empresas.
    
    VISI√ìN:
    Ser la empresa l√≠der en soluciones de IA para PyMEs en Latinoam√©rica.
    
    VALORES:
    - Innovaci√≥n constante
    - Transparencia
    - Compromiso con el cliente
    - Excelencia t√©cnica
    """
    
    # Productos y servicios
    productos_servicios = """
    PRODUCTOS Y SERVICIOS
    
    DESARROLLO WEB:
    - Sitios web responsivos
    - Aplicaciones web progresivas (PWA)
    - E-commerce personalizado
    - Integraci√≥n con sistemas de pago
    
    INTELIGENCIA ARTIFICIAL:
    - Chatbots inteligentes
    - Automatizaci√≥n de procesos
    - An√°lisis de datos
    - Machine Learning personalizado
    
    CONSULTOR√çA TECNOL√ìGICA:
    - Auditor√≠a de sistemas
    - Migraci√≥n a la nube
    - Optimizaci√≥n de procesos
    - Capacitaci√≥n en IA
    
    PRECIOS:
    - Desarrollo web: Desde $500.000 CLP
    - Chatbots: Desde $300.000 CLP
    - Consultor√≠a: $150.000 CLP/hora
    """
    
    # Pol√≠ticas
    politicas = """
    POL√çTICAS DE LA EMPRESA
    
    HORARIOS DE ATENCI√ìN:
    - Lunes a Viernes: 9:00 - 18:00
    - S√°bados: 9:00 - 14:00
    - Domingos: Cerrado
    
    M√âTODOS DE PAGO:
    - Transferencia bancaria
    - Tarjeta de cr√©dito/d√©bito
    - PayPal
    - WebPay Plus
    
    POL√çTICA DE GARANT√çA:
    - 30 d√≠as de garant√≠a en desarrollo web
    - 90 d√≠as de soporte t√©cnico incluido
    - Mantenimiento opcional disponible
    
    POL√çTICA DE PRIVACIDAD:
    - No compartimos datos personales
    - Cumplimiento con LGPD
    - Encriptaci√≥n de datos sensibles
    """
    
    # FAQ
    faq = """
    PREGUNTAS FRECUENTES
    
    P: ¬øCu√°nto tiempo toma desarrollar un sitio web?
    R: Depende de la complejidad. Sitios b√°sicos: 2-3 semanas. E-commerce: 4-6 semanas.
    
    P: ¬øOfrecen mantenimiento despu√©s del desarrollo?
    R: S√≠, ofrecemos planes de mantenimiento mensuales con descuentos especiales.
    
    P: ¬øPueden integrar mi sitio con sistemas existentes?
    R: S√≠, tenemos experiencia en integraci√≥n con ERPs, CRMs y sistemas de pago.
    
    P: ¬øQu√© incluye el soporte t√©cnico?
    R: Correcci√≥n de errores, actualizaciones de seguridad, respaldo de datos y monitoreo.
    
    P: ¬øTrabajan con empresas fuera de Antofagasta?
    R: S√≠, trabajamos con clientes de toda Latinoam√©rica de forma remota.
    
    P: ¬øOfrecen capacitaci√≥n en IA?
    R: S√≠, ofrecemos cursos personalizados para equipos empresariales.
    """
    
    # Escribir archivos
    with open("knowledge/empresa_info.txt", "w", encoding="utf-8") as f:
        f.write(empresa_info)
    
    with open("knowledge/productos_servicios.txt", "w", encoding="utf-8") as f:
        f.write(productos_servicios)
    
    with open("knowledge/politicas.txt", "w", encoding="utf-8") as f:
        f.write(politicas)
    
    with open("knowledge/faq.txt", "w", encoding="utf-8") as f:
        f.write(faq)
    
    print("‚úÖ Archivos de conocimiento creados")

if __name__ == "__main__":
    main()
