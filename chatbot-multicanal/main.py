"""
Sistema de Chatbot Multicanal con LangChain
Un solo agente, m√∫ltiples canales (WhatsApp, Web, Telegram, etc.)
"""

import os
import asyncio
from multiprocessing import Process
from core.agent import MultiChannelAgent
from channels.whatsapp import app as whatsapp_app
from channels.web import app as web_app
from channels.telegram import main as telegram_main

def run_whatsapp():
    """Ejecutar servidor WhatsApp"""
    print("üì± Iniciando servidor WhatsApp...")
    whatsapp_app.run(host="0.0.0.0", port=5000, debug=False)

def run_web():
    """Ejecutar servidor Web"""
    print("üåê Iniciando servidor Web...")
    import uvicorn
    uvicorn.run(web_app, host="0.0.0.0", port=8000)

def run_telegram():
    """Ejecutar bot Telegram"""
    print("üì≤ Iniciando bot Telegram...")
    asyncio.run(telegram_main())

def main():
    """Funci√≥n principal para ejecutar todos los canales"""
    print("üöÄ Iniciando Chatbot Multicanal con LangChain...")
    
    # Verificar variables de entorno
    required_vars = [
        'OPENAI_API_KEY',
        'TWILIO_ACCOUNT_SID',
        'TWILIO_AUTH_TOKEN',
        'WHATSAPP_NUMBER',
        'TELEGRAM_BOT_TOKEN'
    ]
    
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        print(f"‚ùå Variables de entorno faltantes: {missing_vars}")
        print("Crea un archivo .env con las variables necesarias")
        return
    
    # Crear directorio de base de conocimientos si no existe
    os.makedirs("knowledge", exist_ok=True)
    os.makedirs("knowledge_db", exist_ok=True)
    
    # Crear archivos de conocimiento de ejemplo
    create_sample_knowledge_files()
    
    # Iniciar canales en procesos separados
    processes = []
    
    try:
        # Proceso WhatsApp
        whatsapp_process = Process(target=run_whatsapp)
        whatsapp_process.start()
        processes.append(whatsapp_process)
        
        # Proceso Web
        web_process = Process(target=run_web)
        web_process.start()
        processes.append(web_process)
        
        # Proceso Telegram
        telegram_process = Process(target=run_telegram)
        telegram_process.start()
        processes.append(telegram_process)
        
        print("‚úÖ Todos los canales iniciados correctamente")
        print("\nüìã Canales activos:")
        print("‚Ä¢ WhatsApp: http://localhost:5000")
        print("‚Ä¢ Web Chat: http://localhost:8000")
        print("‚Ä¢ Telegram: Bot activo")
        print("\nPresiona Ctrl+C para detener todos los servicios")
        
        # Esperar a que terminen los procesos
        for process in processes:
            process.join()
            
    except KeyboardInterrupt:
        print("\nüõë Deteniendo servicios...")
        for process in processes:
            process.terminate()
        print("‚úÖ Servicios detenidos")

def create_sample_knowledge_files():
    """Crear archivos de conocimiento de ejemplo"""
    
    # Informaci√≥n de la empresa
    empresa_info = """
    INFORMACI√ìN DE LA EMPRESA
    
    Nombre: Mente Aut√≥noma
    Descripci√≥n: Especialistas en desarrollo de software e inteligencia artificial
    Ubicaci√≥n: Antofagasta, Chile
    A√±o de fundaci√≥n: 2024
    
    MISI√ìN:
    Democratizar el acceso a la tecnolog√≠a de inteligencia artificial para peque√±as y medianas empresas.
    
    VISI√ìN:
    Ser la empresa l√≠der en soluciones de IA para PyMEs en Latinoam√©rica.
    
    VALORES:
    - Innovaci√≥n constante
    - Transparencia
    - Compromiso con el cliente
    - Excelencia t√©cnica
    """
    
    # Productos y servicios
    productos_servicios = """
    PRODUCTOS Y SERVICIOS
    
    DESARROLLO WEB:
    - Sitios web responsivos
    - Aplicaciones web progresivas (PWA)
    - E-commerce personalizado
    - Integraci√≥n con sistemas de pago
    
    INTELIGENCIA ARTIFICIAL:
    - Chatbots inteligentes
    - Automatizaci√≥n de procesos
    - An√°lisis de datos
    - Machine Learning personalizado
    
    CONSULTOR√çA TECNOL√ìGICA:
    - Auditor√≠a de sistemas
    - Migraci√≥n a la nube
    - Optimizaci√≥n de procesos
    - Capacitaci√≥n en IA
    
    PRECIOS:
    - Desarrollo web: Desde $500.000 CLP
    - Chatbots: Desde $300.000 CLP
    - Consultor√≠a: $150.000 CLP/hora
    """
    
    # Pol√≠ticas
    politicas = """
    POL√çTICAS DE LA EMPRESA
    
    HORARIOS DE ATENCI√ìN:
    - Lunes a Viernes: 9:00 - 18:00
    - S√°bados: 9:00 - 14:00
    - Domingos: Cerrado
    
    M√âTODOS DE PAGO:
    - Transferencia bancaria
    - Tarjeta de cr√©dito/d√©bito
    - PayPal
    - WebPay Plus
    
    POL√çTICA DE GARANT√çA:
    - 30 d√≠as de garant√≠a en desarrollo web
    - 90 d√≠as de soporte t√©cnico incluido
    - Mantenimiento opcional disponible
    
    POL√çTICA DE PRIVACIDAD:
    - No compartimos datos personales
    - Cumplimiento con LGPD
    - Encriptaci√≥n de datos sensibles
    """
    
    # FAQ
    faq = """
    PREGUNTAS FRECUENTES
    
    P: ¬øCu√°nto tiempo toma desarrollar un sitio web?
    R: Depende de la complejidad. Sitios b√°sicos: 2-3 semanas. E-commerce: 4-6 semanas.
    
    P: ¬øOfrecen mantenimiento despu√©s del desarrollo?
    R: S√≠, ofrecemos planes de mantenimiento mensuales con descuentos especiales.
    
    P: ¬øPueden integrar mi sitio con sistemas existentes?
    R: S√≠, tenemos experiencia en integraci√≥n con ERPs, CRMs y sistemas de pago.
    
    P: ¬øQu√© incluye el soporte t√©cnico?
    R: Correcci√≥n de errores, actualizaciones de seguridad, respaldo de datos y monitoreo.
    
    P: ¬øTrabajan con empresas fuera de Antofagasta?
    R: S√≠, trabajamos con clientes de toda Latinoam√©rica de forma remota.
    
    P: ¬øOfrecen capacitaci√≥n en IA?
    R: S√≠, ofrecemos cursos personalizados para equipos empresariales.
    """
    
    # Escribir archivos
    with open("knowledge/empresa_info.txt", "w", encoding="utf-8") as f:
        f.write(empresa_info)
    
    with open("knowledge/productos_servicios.txt", "w", encoding="utf-8") as f:
        f.write(productos_servicios)
    
    with open("knowledge/politicas.txt", "w", encoding="utf-8") as f:
        f.write(politicas)
    
    with open("knowledge/faq.txt", "w", encoding="utf-8") as f:
        f.write(faq)
    
    print("‚úÖ Archivos de conocimiento creados")

if __name__ == "__main__":
    main()

