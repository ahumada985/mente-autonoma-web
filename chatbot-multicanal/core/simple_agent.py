"""
Agente simplificado para prueba
Funciona sin todas las dependencias de LangChain
"""

import os
import time
from typing import Dict, Any
import json

class SimpleAgent:
    def __init__(self, openai_api_key: str):
        self.openai_api_key = openai_api_key
        self.memory = {}  # Memoria simple por usuario
    
    def process_message(self, message: str, user_id: str, channel: str) -> str:
        """Procesar mensaje desde cualquier canal"""
        start_time = time.time()
        success = False
        response = ""
        
        try:
            # Simular procesamiento con OpenAI
            response = self.simulate_openai_response(message, user_id)
            success = True
            
        except Exception as e:
            error_msg = f"Lo siento, hubo un error procesando tu mensaje: {e}"
            response = error_msg
            print(f"Error: {e}")
        
        finally:
            # Calcular tiempo de respuesta
            response_time = time.time() - start_time
            
            # Guardar en memoria simple
            if user_id not in self.memory:
                self.memory[user_id] = []
            
            self.memory[user_id].append({
                "message": message,
                "response": response,
                "channel": channel,
                "response_time": response_time,
                "success": success,
                "timestamp": time.time()
            })
            
            # Mantener solo Ãºltimos 10 mensajes por usuario
            if len(self.memory[user_id]) > 10:
                self.memory[user_id] = self.memory[user_id][-10:]
        
        return response
    
    def simulate_openai_response(self, message: str, user_id: str) -> str:
        """Simular respuesta de OpenAI"""
        
        # Respuestas predefinidas basadas en palabras clave
        message_lower = message.lower()
        
        if any(word in message_lower for word in ["hola", "hello", "hi", "buenos"]):
            return "Â¡Hola! Soy tu asistente virtual de Mente AutÃ³noma. Â¿En quÃ© puedo ayudarte hoy?"
        
        elif any(word in message_lower for word in ["precio", "costo", "cuanto", "valor"]):
            return "Nuestros precios son:\nâ€¢ Desarrollo web: Desde $500.000 CLP\nâ€¢ Chatbots: Desde $300.000 CLP\nâ€¢ ConsultorÃ­a: $150.000 CLP/hora\n\nÂ¿Te interesa algÃºn servicio especÃ­fico?"
        
        elif any(word in message_lower for word in ["horario", "hora", "atencion", "disponible"]):
            return "Nuestros horarios de atenciÃ³n son:\nâ€¢ Lunes a Viernes: 9:00 - 18:00\nâ€¢ SÃ¡bados: 9:00 - 14:00\nâ€¢ Domingos: Cerrado\n\nÂ¿Necesitas agendar una consulta?"
        
        elif any(word in message_lower for word in ["servicio", "producto", "que", "hacen"]):
            return "Ofrecemos:\nâ€¢ Desarrollo web responsivo\nâ€¢ Chatbots inteligentes\nâ€¢ AutomatizaciÃ³n de procesos\nâ€¢ ConsultorÃ­a en IA\nâ€¢ CapacitaciÃ³n tecnolÃ³gica\n\nÂ¿CuÃ¡l te interesa mÃ¡s?"
        
        elif any(word in message_lower for word in ["contacto", "telefono", "email", "direccion"]):
            return "Puedes contactarnos:\nâ€¢ TelÃ©fono: +56 9 1234 5678\nâ€¢ Email: contacto@empresa.com\nâ€¢ UbicaciÃ³n: Antofagasta, Chile\n\nÂ¿Prefieres que te llamemos?"
        
        elif any(word in message_lower for word in ["gracias", "thanks", "bye", "adios"]):
            return "Â¡De nada! Fue un placer ayudarte. Si tienes mÃ¡s preguntas, no dudes en contactarnos. Â¡Que tengas un excelente dÃ­a!"
        
        else:
            # Respuesta genÃ©rica inteligente
            return f"Entiendo que preguntas sobre '{message}'. Como asistente de Mente AutÃ³noma, puedo ayudarte con informaciÃ³n sobre nuestros servicios, precios, horarios de atenciÃ³n y mÃ¡s. Â¿Hay algo especÃ­fico que te gustarÃ­a saber?"
    
    def get_conversation_history(self, user_id: str) -> list:
        """Obtener historial de conversaciÃ³n de un usuario"""
        return self.memory.get(user_id, [])
    
    def clear_memory(self, user_id: str = None):
        """Limpiar memoria de conversaciÃ³n"""
        if user_id:
            if user_id in self.memory:
                del self.memory[user_id]
        else:
            self.memory.clear()

# Ejemplo de uso
if __name__ == "__main__":
    # Crear agente
    agent = SimpleAgent(openai_api_key="test-key")
    
    # Probar con diferentes mensajes
    print("ðŸ¤– Probando agente simplificado...")
    
    test_messages = [
        "Hola, Â¿cuÃ¡les son sus precios?",
        "Â¿QuÃ© servicios ofrecen?",
        "Â¿CuÃ¡les son sus horarios?",
        "Gracias por la informaciÃ³n"
    ]
    
    for msg in test_messages:
        response = agent.process_message(msg, "user123", "web")
        print(f"Usuario: {msg}")
        print(f"Bot: {response}")
        print("-" * 50)
